// Generated by CoffeeScript 1.6.3
(function() {
  var $, BookmarkOptionsView, BookmarksView, CommandOptionsView, CommandsView, Config, HeaderView, KeyConfig, KeyConfigSet, KeyConfigSetView, KeyConfigView, PopupBaseView, WebFontConfig, bmOpenMode, bookmarksView, catnames, commandOptionsView, commandsDisp, commandsView, decodeKbdEvent, endEdit, escape, fk, keyCodes, keyConfigSetView, keys, marginBottom, modeDisp, modifierInits, modifierKeys, resizeTimer, saveData, scHelp, scHelpSect, startEdit, transKbdEvent, windowOnResize, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  keyConfigSetView = null;

  commandsView = null;

  bookmarksView = null;

  commandOptionsView = null;

  PopupBaseView = Backbone.View.extend({
    initialize: function(options) {
      return keyConfigSetView.on("showPopup", this.onShowPopup, this);
    },
    events: {
      "submit form": "onSubmitForm",
      "click  .icon-remove": "onClickIconRemove"
    },
    render: function() {},
    onShowPopup: function(name, model) {
      var shortcut,
        _this = this;
      if (name !== this.name) {
        return false;
      }
      this.model = model;
      shortcut = decodeKbdEvent(model.get("proxy"));
      this.$(".shortcut").html(_.map(shortcut.split(" + "), function(s) {
        return "<span>" + s + "</span>";
      }).join("+"));
      this.render();
      this.$el.show().draggable({
        cursor: "move",
        delay: 200,
        cancel: "input,textarea,button,select,option,.bookmarkPanel",
        stop: function() {
          return _this.onStopSort();
        }
      });
      this.el.style.pixelLeft = Math.round((window.innerWidth - this.el.offsetWidth) / 2);
      this.el.style.pixelTop = Math.round((window.innerHeight - this.el.offsetHeight) / 2);
      return $(".backscreen").show();
    },
    onStopSort: function() {},
    onClickIconRemove: function() {
      return this.hidePopup();
    },
    hidePopup: function() {
      $(".backscreen").hide();
      return this.$el.hide();
    },
    tmplHelp: _.template("<a href=\"helpview.html#<%=name%>\" target=\"_blank\" class=\"help\" title=\"help\">\n  <i class=\"icon-question-sign\" title=\"Help\"></i>\n</a>")
  });

  commandsDisp = {
    closeOtherTabs: ["tab", "Close other tabs"],
    closeTabsLeft: ["tab", "Close tabs to the left"],
    closeTabsRight: ["tab", "Close tabs to the right"],
    moveTabLeft: ["tab", "Move current tab left"],
    moveTabRight: ["tab", "Move current tab right"],
    moveTabFirst: ["tab", "Move current tab to first position"],
    moveTabLast: ["tab", "Move current tab to last position"],
    duplicateTab: ["tab", "Duplicate a current tab"],
    duplicateTabWin: ["tab", "Duplicate a current tab to a new window"],
    pinTab: ["tab", "Pin/Unpin a current tab"],
    detachTab: ["tab", "Detaches a current tab"],
    attachTab: ["tab", "Attaches a current tab to the next window"],
    switchPrevWin: ["win", "Switches to the previous window"],
    switchNextWin: ["win", "Switches to the next window"],
    pasteText: ["custom", "Paste text", [], "Clip"],
    insertCSS: [
      "custom", "Insert CSS", [
        {
          value: "allFrames",
          caption: "All frames"
        }
      ], "CSS"
    ],
    execJS: [
      "custom", "Execute script", [
        {
          value: "allFrames",
          caption: "All frames"
        }, {
          value: "useUtilObj",
          caption: "Use Utility Object"
        }
      ], "JS"
    ]
  };

  catnames = {
    tab: "Tab commands",
    win: "Window commands",
    clip: "Clipboard commands",
    custom: "Other"
  };

  CommandOptionsView = (function(_super) {
    __extends(CommandOptionsView, _super);

    CommandOptionsView.prototype.name = "commandOptions";

    CommandOptionsView.prototype.el = ".commandOptions";

    function CommandOptionsView(options) {
      CommandOptionsView.__super__.constructor.call(this, options);
      commandsView.on("showPopup", this.onShowPopup, this);
    }

    CommandOptionsView.prototype.render = function() {
      var commandOption,
        _this = this;
      this.$(".command").text(commandsDisp[this.command.name][1]);
      this.$(".caption").val(this.command.caption);
      this.$(".content").val(this.command.content);
      commandOption = this.$(".inputs").empty();
      commandsDisp[this.command.name][2].forEach(function(option) {
        option.checked = "";
        if (_this.command[option.value]) {
          option.checked = "checked";
        }
        return commandOption.append(_this.tmplOptions(option));
      });
      return this.$el.append(this.tmplHelp(this));
    };

    CommandOptionsView.prototype.onShowPopup = function(name, model, options) {
      this.command = options;
      if (!CommandOptionsView.__super__.onShowPopup.call(this, name, model)) {
        return;
      }
      if (this.command.content) {
        this.$(".content").focus()[0].setSelectionRange(0, 0);
      } else {
        this.$(".caption").focus();
      }
      return startEdit();
    };

    CommandOptionsView.prototype.onSubmitForm = function() {
      var caption, content, options,
        _this = this;
      if ((content = this.$(".content").val()) !== "") {
        options = {};
        $.each(this.$(".inputs input[type='checkbox']"), function(i, option) {
          options[option.value] = option.checked;
        });
        if (!(caption = this.$(".caption").val())) {
          caption = content.split("\n")[0];
        }
        this.trigger("setCommand", this.model.id, _.extend({
          name: this.command.name,
          category: this.command.category,
          caption: caption,
          content: content
        }, options));
        this.hidePopup();
      }
      return false;
    };

    CommandOptionsView.prototype.hidePopup = function() {
      endEdit();
      return CommandOptionsView.__super__.hidePopup.call(this);
    };

    CommandOptionsView.prototype.tmplOptions = _.template("<label>\n  <input type=\"checkbox\" value=\"<%=value%>\" <%=checked%>> <%=caption%>\n</label><br>");

    return CommandOptionsView;

  })(PopupBaseView);

  CommandsView = (function(_super) {
    __extends(CommandsView, _super);

    function CommandsView() {
      _ref = CommandsView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CommandsView.prototype.name = "command";

    CommandsView.prototype.el = ".commands";

    CommandsView.prototype.render = function() {
      var categories, key, target$;
      target$ = this.$(".commandRadios");
      target$.empty();
      categories = [];
      for (key in commandsDisp) {
        categories.push(commandsDisp[key][0]);
      }
      categories = _.unique(categories);
      categories.forEach(function(cat) {
        return target$.append("<div class=\"cat" + cat + "\"><div class=\"catname\">" + catnames[cat] + "</div>");
      });
      for (key in commandsDisp) {
        target$.find(".cat" + commandsDisp[key][0]).append(this.tmplItem({
          key: key,
          value: commandsDisp[key][1]
        }));
      }
      return this;
    };

    CommandsView.prototype.onShowPopup = function(name, model, options) {
      if (!CommandsView.__super__.onShowPopup.call(this, name, model)) {
        return;
      }
      if (options) {
        return this.$(".radioCommand").val([options.name]);
      }
    };

    CommandsView.prototype.onSubmitForm = function() {
      var category, command;
      if (command = this.$(".radioCommand:checked").val()) {
        this.hidePopup();
        if ((category = commandsDisp[command][0]) === "custom" || command === "pasteText") {
          this.trigger("showPopup", "commandOptions", this.model, {
            name: command
          });
        } else {
          this.trigger("setCommand", this.model.id, {
            name: command
          });
        }
      }
      return false;
    };

    CommandsView.prototype.tmplItem = _.template("<div>\n  <label>\n    <input type=\"radio\" name=\"radioCommand\" class=\"radioCommand\" value=\"<%=key%>\">\n    <%=value%>\n  </label>\n</div>");

    return CommandsView;

  })(PopupBaseView);

  BookmarkOptionsView = (function(_super) {
    __extends(BookmarkOptionsView, _super);

    BookmarkOptionsView.prototype.name = "bookmarkOptions";

    BookmarkOptionsView.prototype.el = ".bookmarkOptions";

    BookmarkOptionsView.prototype.events = _.extend({
      "click input[value='findtab']": "onClickFindTab"
    }, PopupBaseView.prototype.events);

    function BookmarkOptionsView(options) {
      BookmarkOptionsView.__super__.constructor.call(this, options);
      bookmarksView.on("showPopup", this.onShowPopup, this);
    }

    BookmarkOptionsView.prototype.render = function() {
      var elFindtab, findtab;
      BookmarkOptionsView.__super__.render.call(this);
      this.$(".bookmark").css("background-image", "-webkit-image-set(url(chrome://favicon/size/16@1x/" + this.bookmark.url + ") 1x)").text(this.bookmark.title);
      this.$(".url").text(this.bookmark.url);
      this.$(".findStr").val(this.bookmark.findStr || this.bookmark.url);
      this.$("input[value='" + (this.bookmark.openmode || 'current') + "']")[0].checked = true;
      (elFindtab = this.$("input[value='findtab']")[0]).checked = (findtab = this.bookmark.findtab) === void 0 ? true : findtab;
      this.onClickFindTab({
        currentTarget: elFindtab
      });
      return this.$el.append(this.tmplHelp(this));
    };

    BookmarkOptionsView.prototype.onShowPopup = function(name, model, options) {
      this.bookmark = options;
      if (!BookmarkOptionsView.__super__.onShowPopup.call(this, name, model)) {
        return;
      }
      return startEdit();
    };

    BookmarkOptionsView.prototype.onSubmitForm = function() {
      var options,
        _this = this;
      options = {};
      $.each(this.$("form input[type='checkbox']"), function(i, option) {
        options[option.value] = option.checked;
      });
      options.findtab = this.$("input[value='findtab']").is(":checked");
      options.openmode = this.$("input[name='openmode']:checked").attr("value");
      options.findStr = this.$(".findStr").val();
      this.trigger("setBookmark", this.model.id, _.extend(this.bookmark, options));
      this.hidePopup();
      return false;
    };

    BookmarkOptionsView.prototype.onClickFindTab = function(event) {
      if (event.currentTarget.checked) {
        return this.$(".findStr").removeAttr("disabled");
      } else {
        return this.$(".findStr").attr("disabled", "disabled").blur();
      }
    };

    BookmarkOptionsView.prototype.hidePopup = function() {
      endEdit();
      return BookmarkOptionsView.__super__.hidePopup.call(this);
    };

    return BookmarkOptionsView;

  })(PopupBaseView);

  BookmarksView = (function(_super) {
    __extends(BookmarksView, _super);

    BookmarksView.prototype.name = "bookmark";

    BookmarksView.prototype.el = ".bookmarks";

    BookmarksView.prototype.events = _.extend({
      "click  a": "onClickBookmark",
      "click  .title": "onClickFolder",
      "click  .expand-icon": "onClickExpandIcon",
      "click  .expand": "onClickExpand"
    }, PopupBaseView.prototype.events);

    function BookmarksView(options) {
      var ctx;
      BookmarksView.__super__.constructor.call(this, options);
      this.elBookmark$ = this.$(".result");
      ctx = document.getCSSCanvasContext('2d', 'triangle', 8, 5.5);
      ctx.fillStyle = '#000000';
      ctx.translate(.5, .5);
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(0, 1);
      ctx.lineTo(3.5, 4.5);
      ctx.lineTo(7, 1);
      ctx.lineTo(7, 0);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();
      this.$(".result_outer").niceScroll({
        cursorwidth: 12,
        cursorborderradius: 6,
        smoothscroll: true,
        cursoropacitymin: .1,
        cursoropacitymax: .6
      });
    }

    BookmarksView.prototype.render = function() {
      var height;
      height = window.innerHeight - 60;
      this.$(".result_outer").height(height - 35);
      this.$el.height(height);
      if (this.$(".result").children().length === 0) {
        this.onSubmitForm();
      }
      return this;
    };

    BookmarksView.prototype.onClickFolder = function(event) {
      var target$, visible;
      visible = (target$ = $(event.currentTarget).parent()).hasClass("opened");
      if (visible) {
        target$.removeClass("opened expanded");
      } else {
        target$.addClass("opened expanded");
      }
      windowOnResize();
      return event.stopPropagation();
    };

    BookmarksView.prototype.onClickExpandIcon = function(event) {
      var expanded, target$;
      expanded = (target$ = $(event.currentTarget).parent()).hasClass("expanded");
      if (expanded) {
        target$.removeClass("expanded");
      } else {
        target$.addClass("expanded");
      }
      windowOnResize();
      return event.stopPropagation();
    };

    BookmarksView.prototype.onClickExpand = function() {
      if (this.$(".expand").is(":checked")) {
        this.$(".folder").addClass("opened expanded");
      } else {
        this.$(".folder").removeClass("opened expanded");
      }
      return windowOnResize();
    };

    BookmarksView.prototype.onShowPopup = function(name, model) {
      var target;
      if (!BookmarksView.__super__.onShowPopup.call(this, name, model)) {
        return;
      }
      if ((target = this.$("input.query")).val()) {
        target.focus();
      }
      return this.$(".result_outer").getNiceScroll().show();
    };

    BookmarksView.prototype.onSubmitForm = function() {
      var query, state,
        _this = this;
      this.$(".result").empty();
      query = this.$("input.query").focus().val();
      if (query) {
        this.$(".expand")[0].checked = true;
      }
      state = this.$(".expand").is(":checked") ? "opened expanded" : "";
      chrome.bookmarks.getTree(function(treeNode) {
        var recent;
        treeNode.forEach(function(node) {
          return _this.digBookmarks(node, _this.elBookmark$, query, 0, state);
        });
        _this.elBookmark$.append(recent = $(_this.tmplFolder({
          "title": "Recent",
          "state": state,
          "indent": 0
        })));
        recent.find(".title").prepend("<img src=\"images/star.png\">");
        return chrome.bookmarks.getRecent(50, function(treeNode) {
          return treeNode.forEach(function(node) {
            return _this.digBookmarks(node, recent, query, 1, state);
          });
        });
      });
      return false;
    };

    BookmarksView.prototype.digBookmarks = function(node, parent, query, indent, state) {
      var newParent,
        _this = this;
      if (node.title) {
        node.state = state;
        if (node.children) {
          node.indent = indent;
          parent.append(newParent = $(this.tmplFolder(node)));
          parent = newParent;
        } else {
          if (!query || (node.title + " " + node.url).toUpperCase().indexOf(query.toUpperCase()) > -1) {
            node.indent = indent + 1;
            parent.append($(this.tmplLink(node)));
          }
        }
      } else {
        indent--;
      }
      if (node.children) {
        parent.parent().addClass("hasFolder");
        return node.children.forEach(function(child) {
          return _this.digBookmarks(child, parent, query, indent + 1, state);
        });
      }
    };

    BookmarksView.prototype.hidePopup = function() {
      this.$(".result_outer").getNiceScroll().hide();
      return BookmarksView.__super__.hidePopup.call(this);
    };

    BookmarksView.prototype.onClickBookmark = function(event) {
      var target;
      this.hidePopup();
      target = $(event.currentTarget);
      return this.trigger("showPopup", "bookmarkOptions", this.model, {
        title: target.text(),
        url: target.attr("title"),
        bmId: target.attr("data-id")
      });
    };

    BookmarksView.prototype.onStopSort = function() {
      return this.$(".result_outer").getNiceScroll().resize();
    };

    BookmarksView.prototype.tmplFolder = _.template("<div class=\"folder <%=state%>\" style=\"text-indent:<%=indent%>em\">\n  <span class=\"expand-icon\"></span><span class=\"title\"><%=title%></span>\n</div>");

    BookmarksView.prototype.tmplLink = _.template("<div class=\"link\" style=\"text-indent:<%=indent%>em;\">\n  <a href=\"#\" title=\"<%=url%>\" data-id=\"<%=id%>\" style=\"background-image:-webkit-image-set(url('chrome://favicon/size/16@1x/<%=url%>') 1x);\"><%=title%></a>\n</div>");

    return BookmarksView;

  })(PopupBaseView);

  keyCodes = {};

  keys = null;

  WebFontConfig = {
    google: {
      families: ['Noto+Sans::latin']
    }
  };

  modeDisp = {
    remap: ["Remap", "icon-random"],
    command: ["Command...", "icon-cog"],
    bookmark: ["Bookmark...", "icon-bookmark"],
    simEvent: ["DOM Key Event", "icon-font"],
    disabled: ["Disabled", "icon-ban-circle"],
    through: ["Pause", "icon-pause", "nodisp"]
  };

  bmOpenMode = {
    current: "Open in current tab",
    newtab: "Open in new tab",
    newwin: "Open in new window",
    incognito: "Open in incognito window"
  };

  escape = function(html) {
    var entity;
    entity = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;"
    };
    return html.replace(/[&<>]/g, function(match) {
      return entity[match];
    });
  };

  modifierKeys = ["Ctrl", "Alt", "Shift", "Win", "MouseL", "MouseR", "MouseM"];

  modifierInits = ["c", "a", "s", "w"];

  decodeKbdEvent = function(value) {
    var i, keyCombo, keyIdentifier, modifiers, scanCode, _i, _ref1;
    modifiers = parseInt(value.substring(0, 2), 16);
    scanCode = value.substring(2);
    keyIdentifier = keys[scanCode];
    keyCombo = [];
    for (i = _i = 0, _ref1 = modifierKeys.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      if (modifiers & Math.pow(2, i)) {
        keyCombo.push(modifierKeys[i]);
      }
    }
    if (modifiers & 4) {
      keyCombo.push(keyIdentifier[1] || keyIdentifier[0]);
    } else {
      keyCombo.push(keyIdentifier[0]);
    }
    return keyCombo.join(" + ");
  };

  transKbdEvent = function(value) {
    var i, keyCombo, keyIdenfiers, modifiers, scanCode, _i, _ref1;
    modifiers = parseInt(value.substring(0, 2), 16);
    keyCombo = [];
    for (i = _i = 0, _ref1 = modifierInits.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      if (modifiers & Math.pow(2, i)) {
        keyCombo.push(modifierInits[i]);
      }
    }
    scanCode = value.substring(2);
    keyIdenfiers = keys[scanCode];
    return "[" + keyCombo.join("") + "]" + keyIdenfiers[0];
  };

  HeaderView = Backbone.View.extend({
    scHelpUrl: "https://support.google.com/chrome/answer/157179?hl=",
    el: "div.header",
    events: {
      "click button.addKeyConfig": "onClickAddKeyConfig",
      "change select.kbdtype": "onChangeSelKbd"
    },
    initialize: function(options) {
      var kbdtype, selectKbd$,
        _this = this;
      keys = keyCodes[kbdtype = this.model.get("kbdtype")].keys;
      selectKbd$ = this.$("select.kbdtype");
      $.each(keyCodes, function(key, item) {
        return selectKbd$.append("<option value=\"" + key + "\">" + item.name + "</option>");
      });
      selectKbd$.val(kbdtype);
      return this.setScHelp(kbdtype);
    },
    onClickAddKeyConfig: function(event) {
      return this.trigger("clickAddKeyConfig", event);
    },
    onChangeSelKbd: function(event) {
      this.trigger("changeSelKbd", event);
      return this.setScHelp(this.$("select.kbdtype").val());
    },
    setScHelp: function(kbdtype) {
      if (kbdtype === "JP") {
        return this.$(".scHelp").text("ショートカットキー一覧").attr("href", this.scHelpUrl + "ja");
      } else {
        return this.$(".scHelp").text("Keyboard shortcuts").attr("href", this.scHelpUrl + "en");
      }
    }
  });

  Config = Backbone.Model.extend({});

  KeyConfig = Backbone.Model.extend({
    idAttribute: "proxy",
    defaults: {
      mode: "remap"
    }
  });

  KeyConfigSet = Backbone.Collection.extend({
    model: KeyConfig
  });

  KeyConfigView = Backbone.View.extend({
    kbdtype: null,
    optionKeys: [],
    events: {
      "click .origin,.proxy": "onClickInput",
      "click div.mode": "onClickMode",
      "click .selectMode div": "onChangeMode",
      "click div.edit": "onClickEdit",
      "click div.copySC": "onClickCopySC",
      "click div.pause": "onClickPause",
      "click div.resume": "onClickResume",
      "click div.delete": "onClickRemove",
      "click input.memo": "onClickInputMemo",
      "click button.cog": "onClickCog",
      "submit .memo": "onSubmitMemo",
      "blur  .selectMode": "onBlurSelectMode",
      "blur  .selectCog": "onBlurSelectCog",
      "blur  input.memo": "onBlurInputMemo"
    },
    initialize: function(options) {
      this.optionKeys = _.keys(modeDisp);
      this.model.on({
        "change:bookmark": this.onChangeBookmark,
        "change:command": this.onChangeCommand,
        "setFocus": this.onClickInput,
        "remove": this.onRemove
      }, this);
      return this.model.collection.on({
        "kbdEvent": this.onKbdEvent,
        "changeKbd": this.onChangeKbd,
        "updateOrder": this.onUpdateOrder
      }, this);
    },
    render: function(kbdtype) {
      var mode;
      this.setElement(this.template({
        options: modeDisp
      }));
      mode = this.model.get("mode");
      this.setKbdValue(this.$(".proxy"), this.model.id);
      this.setKbdValue(this.$(".origin"), this.model.get("origin"));
      this.kbdtype = kbdtype;
      this.onChangeMode(null, mode);
      return this;
    },
    onChangeBookmark: function() {
      return this.onChangeMode(null, "bookmark");
    },
    onChangeCommand: function() {
      return this.onChangeMode(null, "command");
    },
    onRemove: function() {
      this.model.off(null, null, this);
      this.off(null, null, null);
      return this.remove();
    },
    onKbdEvent: function(value) {
      var input$;
      input$ = this.$("div:focus");
      if (input$.length > 0) {
        if (input$.hasClass("proxy")) {
          if (this.model.id !== value && this.model.collection.findWhere({
            proxy: value
          })) {
            $("#tiptip_content").text("\"" + (decodeKbdEvent(value)) + "\" is already exists.");
            input$.tipTip();
            return;
          }
        } else {
          if (~~value.substring(2) > 0x200) {
            return;
          }
        }
        this.setKbdValue(input$, value);
        this.model.set(input$[0].className.match(/(proxy|origin)/)[0], value);
        this.setDesc();
        return this.trigger("resizeInput");
      }
    },
    onChangeKbd: function(kbdtype) {
      this.kbdtype = kbdtype;
      this.setKbdValue(this.$(".proxy"), this.model.id);
      this.setKbdValue(this.$(".origin"), this.model.get("origin"));
      return this.setDesc();
    },
    onUpdateOrder: function() {
      return this.model.set("ordernum", this.$el.parent().children().index(this.$el));
    },
    onClickCopySC: function() {
      var body, command, desc, keycombo, text;
      keycombo = (decodeKbdEvent(this.model.id)).replace(/\s/g, "");
      command = this.$("td.options .mode").text().replace("None", "");
      if (command) {
        command = " " + command + ":";
      }
      desc = this.$(".desc").find(".content,.command,.bookmark,.memo").text();
      if (desc) {
        desc = " " + desc;
      }
      body = "tsc.send('" + transKbdEvent(this.model.id) + "');";
      text = body + " /* " + keycombo + command + desc + " */";
      return chrome.runtime.sendMessage({
        action: "setClipboard",
        value1: text
      }, function(msg) {});
    },
    onClickInputMemo: function() {
      return event.stopPropagation();
    },
    onSubmitMemo: function() {
      this.$("form.memo").hide();
      this.model.set({
        "memo": this.$("div.memo").show().html(escape(this.$("input.memo").val())).text()
      });
      endEdit();
      return false;
    },
    onClickMode: function() {
      if (this.$(".selectMode").toggle().is(":visible")) {
        this.$(".selectMode").focus();
        this.$(".mode").addClass("selecting");
      } else {
        this.$(".mode").removeClass("selecting");
      }
      return event.stopPropagation();
    },
    onChangeMode: function(event, mode) {
      if (event) {
        this.$(".mode").removeClass("selecting");
        mode = event.currentTarget.className;
        this.$(".selectMode").hide();
        if (mode === "bookmark" || mode === "command") {
          this.trigger("showPopup", mode, this.model, this.model.get(mode));
          return;
        }
      }
      this.model.set("mode", mode);
      this.setDispMode(mode);
      this.setDesc();
      return this.trigger("resizeInput");
    },
    onBlurSelectMode: function() {
      this.$(".selectMode").hide();
      return this.$(".mode").removeClass("selecting");
    },
    onClickInput: function(event, selector) {
      if (event) {
        $(event.currentTarget).focus();
      } else if (selector) {
        this.$(selector).focus();
      } else {
        this.$(".origin").focus();
      }
      return event != null ? event.stopPropagation() : void 0;
    },
    onBlurInputMemo: function() {
      return this.onSubmitMemo();
    },
    onClickCog: function(event) {
      if (this.$(".selectCog").toggle().is(":visible")) {
        this.$(".selectCog").focus();
        $(event.currentTarget).addClass("selecting");
      } else {
        $(event.currentTarget).removeClass("selecting");
      }
      return event.stopPropagation();
    },
    onBlurSelectCog: function() {
      this.$(".selectCog").hide();
      return this.$("button.cog").removeClass("selecting");
    },
    onClickEdit: function(event) {
      var editing, input$, memo, mode;
      switch (mode = this.model.get("mode")) {
        case "bookmark":
          return this.trigger("showPopup", "bookmarkOptions", this.model, this.model.get("bookmark"));
        case "command":
          return this.trigger("showPopup", "commandOptions", this.model, this.model.get("command"));
        default:
          (memo = this.$("div.memo")).toggle();
          editing = (input$ = this.$("form.memo").toggle().find("input.memo")).is(":visible");
          if (editing) {
            input$.focus().val(memo.text());
            startEdit();
          } else {
            this.onSubmitMemo();
          }
          return event.stopPropagation();
      }
    },
    onClickPause: function() {
      this.model.set("lastMode", this.model.get("mode"));
      return this.onChangeMode(null, "through");
    },
    onClickResume: function() {
      return this.onChangeMode(null, this.model.get("lastMode"));
    },
    onClickRemove: function() {
      var shortcut;
      shortcut = decodeKbdEvent(this.model.id);
      if (confirm("Are you sure you want to delete this shortcut?\n\n '" + shortcut + "'")) {
        return this.trigger("removeConfig", this.model);
      }
    },
    setDispMode: function(mode) {
      this.$(".mode").attr("title", modeDisp[mode][0].replace("...", "")).find(".icon")[0].className = "icon " + modeDisp[mode][1];
      if (mode === "through") {
        mode = this.model.get("lastMode") + " through";
      }
      this.$(".proxy,.origin,.icon-arrow-right").removeClass(this.optionKeys.join(" ")).addClass(mode);
      if (/remap/.test(mode)) {
        this.$(".origin").attr("tabIndex", "0");
        this.$("th:first").removeAttr("colspan");
        return this.$("th:eq(1),th:eq(2)").show();
      } else {
        this.$(".origin").removeAttr("tabIndex");
        this.$("th:first").attr("colspan", "3");
        return this.$("th:eq(1),th:eq(2)").hide();
      }
    },
    setKbdValue: function(input$, value) {
      var result;
      if (result = decodeKbdEvent(value)) {
        return input$.html(_.map(result.split(" + "), function(s) {
          return "<span>" + s + "</span>";
        }).join("+"));
      }
    },
    setDesc: function() {
      var bookmark, command, commandDisp, commandName, content, content3row, ctg, desc, editOption, help, i, key, keycombo, lang, lines, mode, pause, tdDesc, test, _i, _j, _ref1, _ref2;
      (tdDesc = this.$(".desc")).empty();
      editOption = {
        iconName: "",
        command: ""
      };
      if ((mode = this.model.get("mode")) === "through") {
        pause = true;
        mode = this.model.get("lastMode");
      }
      switch (mode) {
        case "bookmark":
          bookmark = this.model.get("bookmark");
          tdDesc.append(this.tmplBookmark({
            openmode: bmOpenMode[bookmark.openmode],
            url: bookmark.url,
            title: bookmark.title
          }));
          editOption = {
            iconName: "icon-cog",
            command: "Edit bookmark..."
          };
          break;
        case "command":
          desc = (commandDisp = commandsDisp[commandName = this.model.get("command").name])[1];
          if ((ctg = commandDisp[0]) === "custom" || commandName === "pasteText") {
            content3row = [];
            command = this.model.get("command");
            lines = command.content.split("\n");
            for (i = _i = 0, _ref1 = lines.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
              if (i > 2) {
                content3row[i - 1] += " ...";
                break;
              } else {
                content3row.push(lines[i].replace(/"/g, "'"));
              }
            }
            tdDesc.append(this.tmplCommandCustom({
              ctg: commandDisp[3],
              desc: desc,
              content3row: content3row.join("\n"),
              caption: command.caption
            }));
          } else {
            tdDesc.append(this.tmplCommand({
              desc: desc,
              ctg: ctg.substring(0, 1).toUpperCase() + ctg.substring(1)
            }));
          }
          if (ctg === "custom" || commandName === "pasteText") {
            editOption = {
              iconName: "icon-cog",
              command: "Edit command..."
            };
          }
          break;
        case "remap":
        case "disabled":
          lang = this.kbdtype === "JP" ? "ja" : "en";
          if (mode === "remap") {
            keycombo = this.$(".origin").text();
          } else {
            keycombo = this.$(".proxy").text();
          }
          keycombo = (keycombo.replace(/\s/g, "")).toUpperCase();
          if (!(help = scHelp[keycombo])) {
            if (/^CTRL\+[2-7]$/.test(keycombo)) {
              help = scHelp["CTRL+1"];
            }
          }
          if (help) {
            for (i = _j = 0, _ref2 = help[lang].length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
              test = help[lang][i].match(/(^\w+)\^(.+)/);
              key = RegExp.$1;
              content = RegExp.$2;
              tdDesc.append(this.tmplHelp({
                sectDesc: scHelpSect[key],
                sectKey: key,
                scHelp: content
              })).find(".sectInit").tooltip({
                position: {
                  my: "left+10 top-60"
                }
              });
            }
          }
      }
      if (tdDesc.html() === "") {
        tdDesc.append(this.tmplMemo({
          memo: this.model.get("memo")
        }));
        editOption = {
          iconName: "icon-pencil",
          command: "Edit description..."
        };
      }
      tdDesc.append(this.tmplDesc(editOption));
      if (editOption.iconName === "") {
        tdDesc.find(".edit").remove();
      }
      if (pause) {
        return tdDesc.find(".pause").remove();
      } else {
        return tdDesc.find(".resume").remove();
      }
    },
    tmplDesc: _.template("<button class=\"cog small\"><i class=\"icon-caret-down\"></i></button>\n<div class=\"selectCog\" tabIndex=\"0\">\n  <div class=\"edit\"><i class=\"<%=iconName%>\"></i> <%=command%></div>\n  <div class=\"copySC\"><i class=\"icon-paper-clip\"></i> Copy shortcut command</div>\n  <span class=\"seprater\"><hr style=\"margin:3px 1px\" noshade></span>\n  <div class=\"pause\"><i class=\"icon-pause\"></i> Pause</div>\n  <div class=\"resume\"><i class=\"icon-play\"></i> Resume</div>\n  <span class=\"seprater\"><hr style=\"margin:3px 1px\" noshade></span>\n  <div class=\"delete\"><i class=\"icon-remove\"></i> Delete</div>\n</div>"),
    tmplMemo: _.template("<form class=\"memo\">\n  <input type=\"text\" class=\"memo\">\n</form>\n<div class=\"memo\"><%=memo%></div>"),
    tmplBookmark: _.template("<div class=\"bookmark\" title=\"<<%=openmode%>>\n<%=url%>\" style=\"background-image:-webkit-image-set(url(chrome://favicon/size/16@1x/<%=url%>) 1x);\"><%=title%></div>"),
    tmplCommand: _.template("<div class=\"ctgIcon <%=ctg%>\"><%=ctg%></div><div class=\"command\"><%=desc%></div>"),
    tmplCommandCustom: _.template("<div class=\"ctgIcon <%=ctg%>\"><%=ctg%></div>\n<div class=\"command\"><%=desc%>:</div><div class=\"commandCaption\" title=\"<%=content3row%>\"><%=caption%></div>"),
    tmplHelp: _.template("<div class=\"sectInit\" title=\"<%=sectDesc%>\"><%=sectKey%></div><div class=\"content\"><%=scHelp%></div>"),
    template: _.template("<tr class=\"data\">\n  <th>\n    <div class=\"proxy\" tabIndex=\"0\"></div>\n  </th>\n  <th>\n    <i class=\"icon-arrow-right\"></i>\n  </th>\n  <th class=\"tdOrigin\">\n    <div class=\"origin\" tabIndex=\"0\"></div>\n  </th>\n  <td class=\"options\">\n    <div class=\"mode\"><i class=\"icon\"></i><span></span><i class=\"icon-caret-down\"></i></div>\n    <div class=\"selectMode\" tabIndex=\"0\">\n      <% _.each(options, function(option, key) { if (option[2] != \"nodisp\") { %>\n      <div class=\"<%=key%>\"><i class=\"icon <%=option[1]%>\"></i> <%=option[0]%></div>\n      <% }}); %>\n    </div>\n  <td class=\"desc\"></td>\n  <td class=\"blank\">&nbsp;</td>\n</tr>")
  });

  KeyConfigSetView = Backbone.View.extend({
    placeholder: "Enter new shortcut key",
    el: "table.keyConfigSetView",
    events: {
      "click .addnew": "onClickAddnew",
      "blur  .addnew": "onBlurAddnew",
      "click": "onClickBlank"
    },
    initialize: function(options) {
      this.collection.comparator = function(model) {
        return model.get("ordernum");
      };
      return this.collection.on({
        add: this.onAddRender,
        kbdEvent: this.onKbdEvent
      }, this);
    },
    render: function(keyConfigSet) {
      var _this = this;
      this.$el.append(this.template());
      this.collection.set(keyConfigSet);
      this.$("tbody").sortable({
        delay: 300,
        scroll: true,
        cursor: "move",
        update: function() {
          return _this.onUpdateSort();
        },
        start: function() {
          return _this.onStartSort();
        },
        stop: function() {
          return _this.onStopSort();
        }
      });
      $(".fixed-table-container-inner").niceScroll({
        cursorwidth: 12,
        cursorborderradius: 2,
        smoothscroll: true,
        cursoropacitymin: .3,
        cursoropacitymax: .7,
        zindex: 999998
      });
      this.niceScroll = $(".fixed-table-container-inner").getNiceScroll();
      return this;
    },
    onAddRender: function(model) {
      var keyConfigView, newChild;
      keyConfigView = new KeyConfigView({
        model: model
      });
      keyConfigView.on("removeConfig", this.onChildRemoveConfig, this);
      keyConfigView.on("resizeInput", this.onChildResizeInput, this);
      keyConfigView.on("showPopup", this.onShowPopup, this);
      return this.$("tbody").append(newChild = keyConfigView.render(this.model.get("kbdtype")).$el).append(this.tmplBorder);
    },
    onKbdEvent: function(value) {
      var model, newitem, originValue, target;
      if (this.$(".addnew").length === 0) {
        if ((target = this.$(".proxy:focus,.origin:focus")).length === 0) {
          if (model = this.collection.get(value)) {
            model.trigger("setFocus", null, ".proxy");
            return;
          } else {
            if (!this.onClickAddKeyConfig()) {
              return;
            }
          }
        } else {
          return;
        }
      }
      if (this.collection.findWhere({
        proxy: value
      })) {
        $("#tiptip_content").text("\"" + (decodeKbdEvent(value)) + "\" is already exists.");
        this.$("div.addnew").tipTip();
        return;
      }
      this.$("div.addnew").blur();
      if (~~value.substring(2) > 0x200) {
        originValue = "0130";
      } else {
        originValue = value;
      }
      this.collection.add(newitem = new KeyConfig({
        proxy: value,
        origin: originValue
      }));
      this.$("tbody").sortable("enable").sortable("refresh");
      windowOnResize();
      this.onChildResizeInput();
      return newitem.trigger("setFocus");
    },
    onChildRemoveConfig: function(model) {
      this.collection.remove(model);
      this.onStopSort();
      windowOnResize();
      return this.onChildResizeInput();
    },
    onChildResizeInput: function() {
      var _this = this;
      this.$(".th_inner").css("left", 0);
      return setTimeout((function() {
        return _this.$(".th_inner").css("left", "");
      }), 0);
    },
    onShowPopup: function(name, model, options) {
      return this.trigger("showPopup", name, model, options);
    },
    onSetBookmark: function(modelId, options) {
      return this.collection.get(modelId).set({
        "bookmark": options
      }, {
        silent: true
      }).trigger("change:bookmark");
    },
    onSetCommand: function(modelId, options) {
      return this.collection.get(modelId).set({
        "command": options
      }, {
        silent: true
      }).trigger("change:command");
    },
    onClickAddKeyConfig: function(event) {
      if (this.$(".addnew").length > 0) {
        return;
      }
      if (this.collection.length > 50) {
        $("#tiptip_content").text("You have reached the maximum number of items. (Max 50 items)");
        $(event.currentTarget).tipTip({
          defaultPosition: "left"
        });
        return false;
      }
      $(this.tmplAddNew({
        placeholder: this.placeholder
      })).appendTo(this.$("tbody")).find(".addnew").focus()[0].scrollIntoView();
      this.$("tbody").sortable("disable");
      windowOnResize();
      return true;
    },
    onClickBlank: function() {
      return this.$(":focus").blur();
    },
    onClickAddnew: function(event) {
      return event.stopPropagation();
    },
    onBlurAddnew: function() {
      this.$(".addnew").remove();
      this.$("tbody").sortable("enable");
      return windowOnResize();
    },
    onChangeSelKbd: function(event) {
      var newKbd;
      keys = keyCodes[newKbd = event.currentTarget.value].keys;
      this.collection.trigger("changeKbd", newKbd);
      return this.model.set("kbdtype", newKbd);
    },
    onStartSort: function() {
      return this.$(".ui-sortable-placeholder").next("tr.border").remove();
    },
    onStopSort: function() {
      var target$,
        _this = this;
      $.each(this.$("tbody tr"), function(i, tr) {
        var target$, _ref1, _ref2;
        if (tr.className === "data") {
          if (((_ref1 = $(tr).next("tr")[0]) != null ? _ref1.className : void 0) !== "border") {
            return $(tr).after(_this.tmplBorder);
          }
        } else {
          if (((_ref2 = (target$ = $(tr).next("tr"))[0]) != null ? _ref2.className : void 0) !== "data") {
            return target$.remove();
          }
        }
      });
      if ((target$ = this.$("tbody tr:first"))[0].className === "border") {
        return target$.remove();
      }
    },
    onUpdateSort: function() {
      this.collection.trigger("updateOrder");
      return this.collection.sort();
    },
    getSaveData: function() {
      this.collection.remove(this.collection.findWhere({
        proxy: this.placeholder
      }));
      return {
        config: this.model.toJSON(),
        keyConfigSet: this.collection.toJSON()
      };
    },
    tmplAddNew: _.template("<tr class=\"addnew\">\n  <th colspan=\"3\">\n    <div class=\"proxy addnew\" tabIndex=\"0\"><%=placeholder%></div>\n  </th>\n  <td></td><td></td><td class=\"blank\"></td>\n</tr>"),
    tmplBorder: "<tr class=\"border\">\n  <td colspan=\"5\"><div class=\"border\"></div></td>\n  <td></td>\n</tr>",
    template: _.template("<thead>\n  <tr>\n    <th>\n      <div class=\"th_inner\">New <i class=\"icon-arrow-right\"></i> Origin shortcut key</div>\n    </th>\n    <th></th>\n    <th></th>\n    <th>\n      <div class=\"th_inner options\">Mode</div>\n    </th>\n    <th>\n      <div class=\"th_inner desc\">Description</div>\n    </th>\n    <th><div class=\"th_inner blank\">&nbsp;</div></th>\n  </tr>\n</thead>\n<tbody></tbody>")
  });

  marginBottom = 0;

  resizeTimer = false;

  windowOnResize = function() {
    if (resizeTimer) {
      clearTimeout(resizeTimer);
    }
    return resizeTimer = setTimeout((function() {
      var tableHeight;
      tableHeight = window.innerHeight - document.querySelector(".header").offsetHeight - marginBottom;
      document.querySelector(".fixed-table-container").style.pixelHeight = tableHeight;
      $(".fixed-table-container-inner").getNiceScroll().resize();
      return $(".result_outer").getNiceScroll().resize();
    }), 200);
  };

  fk = chrome.extension.getBackgroundPage().fk;

  saveData = fk.getConfig();

  keyCodes = fk.getKeyCodes();

  scHelp = fk.getScHelp();

  scHelpSect = fk.getScHelpSect();

  startEdit = function() {
    return fk.startEdit();
  };

  endEdit = function() {
    return fk.endEdit();
  };

  $ = jQuery;

  $(function() {
    var bookmarkOptionsView, headerView;
    headerView = new HeaderView({
      model: new Config(saveData.config)
    });
    headerView.render();
    keyConfigSetView = new KeyConfigSetView({
      model: new Config(saveData.config),
      collection: new KeyConfigSet()
    });
    keyConfigSetView.render(saveData.keyConfigSet);
    bookmarksView = new BookmarksView({});
    bookmarkOptionsView = new BookmarkOptionsView({});
    commandsView = new CommandsView({});
    commandOptionsView = new CommandOptionsView({});
    headerView.on("clickAddKeyConfig", keyConfigSetView.onClickAddKeyConfig, keyConfigSetView);
    headerView.on("changeSelKbd", keyConfigSetView.onChangeSelKbd, keyConfigSetView);
    commandsView.on("setCommand", keyConfigSetView.onSetCommand, keyConfigSetView);
    commandOptionsView.on("setCommand", keyConfigSetView.onSetCommand, keyConfigSetView);
    bookmarkOptionsView.on("setBookmark", keyConfigSetView.onSetBookmark, keyConfigSetView);
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
      switch (request.action) {
        case "kbdEvent":
          return keyConfigSetView.collection.trigger("kbdEvent", request.value);
        case "saveConfig":
          return fk.saveConfig(keyConfigSetView.getSaveData());
      }
    });
    $(window).on("unload", function() {
      return fk.saveConfig(keyConfigSetView.getSaveData());
    }).on("resize", function() {
      return windowOnResize();
    });
    $(".beta").text("\u03B2");
    return windowOnResize();
  });

}).call(this);
