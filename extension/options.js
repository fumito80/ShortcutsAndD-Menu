// Generated by CoffeeScript 1.6.3
(function() {
  var $, Config, KeyConfig, KeyConfigSet, KeyConfigSetView, KeyConfigView, bkg, config, keyCodes, keys;

  keyCodes = {};

  keys = void 0;

  Config = Backbone.Model.extend({});

  KeyConfig = Backbone.Model.extend({
    defaults: {
      disShortcut: "",
      newShortcut: "",
      option: "sendDom"
    }
  });

  KeyConfigSet = Backbone.Collection.extend({
    model: KeyConfig
  });

  KeyConfigView = Backbone.View.extend({
    events: {
      "click input[type='radio']": "onClickRadio",
      "click i.icon-remove": "onClickRemove",
      "keydown input.disShortcut": "onKeydownDisSC"
    },
    initialize: function(options) {
      this.model.on("remove", this.onRemove, this);
      return this.model.collection.on("kbdEvent", this.onKbdEvent, this);
    },
    onKbdEvent: function(value) {
      var input$;
      input$ = this.$("input:text:focus");
      if (input$.length > 0) {
        this.setKbdValue(input$, value);
        return this.model.set(input$[0].className, value);
      }
    },
    setKbdValue: function(input$, value) {
      var key, modif, splited;
      modif = (splited = value.split(","))[0];
      key = void 0;
      if (key = keys[splited[1]]) {
        if (/Shift/.test(modif) && key[1]) {
          return input$.val(modif + " + " + key[1]);
        } else if (key[0]) {
          return input$.val(modif + " + " + key[0]);
        } else {
          return input$.val("");
        }
      } else {
        return input$.val("");
      }
    },
    render: function() {
      this.setElement(this.template(this.model.toJSON()));
      this.$("input[value='" + this.model.get("option") + "']").attr("checked", "checked");
      return this;
    },
    onClickRadio: function(event) {
      var target$;
      this.$("input[type='radio']").parent().removeClass("bold");
      target$ = $(event.currentTarget);
      target$.parent().addClass("bold");
      this.model.set("option", target$[0].className);
      if (target$.val() === "assignOther") {
        return target$.parents("label").find("input.newShortcut").focus();
      }
    },
    onClickRemove: function() {
      return this.trigger("removeConfig", this.model);
    },
    onRemove: function() {
      this.model.off(null, null, this);
      this.off(null, null, null);
      return this.remove();
    },
    template: _.template("<div class=\"innerframe\">\n  <i class=\"icon-remove\" title=\"Remove\"></i>\n  <label>\n    <div class=\"targetCaption\">Target shortcut key:</div>\n    <input type=\"text\" class=\"disShortcut\" readonly>\n  </label>\n  <i class=\"icon-double-angle-right\"></i>\n  <label>\n    <div class=\"radioCaption\">\n      <input type=\"radio\" name=\"options\" class=\"options\" value=\"assignOther\">Assign other shortcut key\n    </div>\n    <input type=\"text\" class=\"newShortcut\" readonly>\n  </label>\n  <label>\n    <div class=\"radioCaption bold\">\n      <input type=\"radio\" name=\"options\" class=\"options\" value=\"sendDom\">Simulate keydown event\n    </div>\n  </label>\n  <label>\n    <div class=\"radioCaption\">\n      <input type=\"radio\" name=\"options\" class=\"options\" value=\"disable\">Disabled\n    </div>\n  </label>\n</div>")
  });

  KeyConfigSetView = Backbone.View.extend({
    el: "div.outerframe",
    events: {
      "click button.addKeyConfig": "onClickAddKeyConfig",
      "click button.save": "onClickSave"
    },
    initialize: function(options) {
      this.collection.on({
        add: this.onAddRender,
        onKeyEvent: this.onAddRender
      }, this);
      return keys = keyCodes[this.model.get("kbdtype")];
    },
    render: function() {
      return this.collection.set(this.model.get("keyConfigSet"));
    },
    onAddRender: function(model) {
      var keyConfigView, newChild, t, taskView;
      taskView = void 0;
      keyConfigView = new KeyConfigView({
        model: model
      });
      this.$("div.configSetView").append(newChild = keyConfigView.render().$el);
      t = (new Date()).getTime();
      newChild.find("input:radio").attr("name", "options" + t).end().find("i.icon-double-angle-right").css("top", newChild.height() / 2 - 12);
      return keyConfigView.on("removeConfig", this.onRemoveConfig, this);
    },
    onClickSave: function() {
      return fireKeyEvent();
    },
    onRemoveConfig: function(model) {
      return this.collection.remove(model);
    },
    onClickAddKeyConfig: function() {
      return this.collection.add(new KeyConfig({}));
    }
  });

  bkg = chrome.extension.getBackgroundPage();

  config = bkg.getConfig();

  keyCodes = bkg.getKeyCodes();

  $ = jQuery;

  $(function() {
    var keyConfigSetView;
    keyConfigSetView = new KeyConfigSetView({
      model: new Config(config),
      collection: new KeyConfigSet()
    });
    return keyConfigSetView.render();
  });

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.key === "kbdEvent") {
      return keyConfigSetView.collection.trigger("kbdEvent", request.value);
    }
  });

}).call(this);
