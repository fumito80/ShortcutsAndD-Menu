// Generated by CoffeeScript 1.6.3
(function() {
  var $, Config, HeaderView, KeyConfig, KeyConfigSet, KeyConfigSetView, KeyConfigView, WebFontConfig, fk, keyCodes, keys, marginBottom, resizeTimer, saveData, scHelp, scHelpSect, windowOnResize;

  keyCodes = {};

  keys = null;

  WebFontConfig = {
    google: {
      families: ['Noto+Sans::latin']
    }
  };

  HeaderView = Backbone.View.extend({
    scHelpUrl: "https://support.google.com/chrome/answer/157179?hl=",
    el: "div.header",
    events: {
      "click button.addKeyConfig": "onClickAddKeyConfig",
      "change select.kbdtype": "onChangeSelKbd"
    },
    initialize: function(options) {
      var kbdtype, selectKbd$,
        _this = this;
      keys = keyCodes[kbdtype = this.model.get("kbdtype")].keys;
      selectKbd$ = this.$("select.kbdtype");
      $.each(keyCodes, function(key, item) {
        return selectKbd$.append("<option value=\"" + key + "\">" + item.name + "</option>");
      });
      selectKbd$.val(kbdtype);
      return this.setScHelp(kbdtype);
    },
    onClickAddKeyConfig: function(event) {
      return this.trigger("clickAddKeyConfig", event);
    },
    onChangeSelKbd: function(event) {
      this.trigger("changeSelKbd", event);
      return this.setScHelp(this.$("select.kbdtype").val());
    },
    setScHelp: function(kbdtype) {
      if (kbdtype === "JP") {
        return this.$(".scHelp").text("ショートカットキー一覧").attr("href", this.scHelpUrl + "ja");
      } else {
        return this.$(".scHelp").text("Keyboard shortcuts").attr("href", this.scHelpUrl + "en");
      }
    }
  });

  Config = Backbone.Model.extend({});

  KeyConfig = Backbone.Model.extend({
    idAttribute: "proxy",
    defaults: {
      mode: "assignOrg"
    }
  });

  KeyConfigSet = Backbone.Collection.extend({
    model: KeyConfig
  });

  KeyConfigView = Backbone.View.extend({
    kbdtype: null,
    events: {
      "click .origin,.proxy": "onClickInput",
      "click i.icon-remove": "onClickRemove",
      "change select.mode": "onChangeMode"
    },
    initialize: function(options) {
      this.model.on({
        setFocus: this.onClickInput,
        remove: this.onRemove
      }, this);
      return this.model.collection.on({
        kbdEvent: this.onKbdEvent,
        changeKbd: this.onChangeKbd,
        updateOrder: this.onUpdateOrder
      }, this);
    },
    render: function(kbdtype) {
      var mode;
      this.setElement(this.template(this.model.toJSON()));
      mode = this.model.get("mode");
      this.$(".mode").val(mode);
      this.setKbdValue(this.$(".proxy"), this.model.id);
      this.setKbdValue(this.$(".origin"), this.model.get("origin"));
      this.kbdtype = kbdtype;
      this.onChangeMode();
      return this;
    },
    onRemove: function() {
      this.model.off(null, null, this);
      this.off(null, null, null);
      return this.remove();
    },
    onKbdEvent: function(value) {
      var container, input$;
      input$ = this.$("div:focus");
      if (input$.length > 0) {
        if (input$.hasClass("proxy")) {
          if (this.model.id !== value && this.model.collection.findWhere({
            proxy: value
          })) {
            this.trigger("decodeKbdEvent", value, container = {});
            $("#tiptip_content").text("\"" + container.result + "\" is already exists.");
            input$.tipTip();
            return;
          }
        }
        this.setKbdValue(input$, value);
        this.model.set(input$[0].className.match(/(proxy|origin)/)[0], value);
        this.setHelp();
        return this.trigger("resizeInput");
      }
    },
    onChangeKbd: function(kbdtype) {
      this.kbdtype = kbdtype;
      this.setKbdValue(this.$(".proxy"), this.model.id);
      this.setKbdValue(this.$(".origin"), this.model.get("origin"));
      return this.setHelp();
    },
    onUpdateOrder: function() {
      return this.model.set("ordernum", this.$el.parent().children().index(this.$el));
    },
    onChangeMode: function(event) {
      var mode, select$;
      if (event) {
        $(event.currentTarget).blur();
      }
      this.model.set("mode", mode = (select$ = this.$(".mode")).val());
      select$.removeClass("assignOrg simEvent disabled").addClass(mode);
      this.setDispMode(mode);
      return this.setHelp();
    },
    onClickInput: function(event) {
      var target$;
      if (event) {
        if ((target$ = $(event.currentTarget)).hasClass("proxy") || target$.hasClass("origin assignOrg")) {
          return target$.focus();
        }
      } else {
        return this.$(".proxy").focus();
      }
    },
    onClickRemove: function() {
      return this.trigger("removeConfig", this.model);
    },
    setDispMode: function(mode) {
      this.$(".proxy,.origin,.icon-double-angle-right").removeClass("assignOrg simEvent disabled").addClass(mode);
      if (mode === "assignOrg") {
        return this.$(".origin").attr("tabIndex", "0");
      } else {
        return this.$(".origin").removeAttr("tabIndex");
      }
    },
    setKbdValue: function(input$, value) {
      var container;
      this.trigger("decodeKbdEvent", value, container = {});
      return input$.text(container.result);
    },
    setHelp: function() {
      var content, help, i, key, keycombo, lang, mode, test, _i, _ref, _results;
      this.$(".desc").empty();
      if ((mode = this.model.get("mode")) === "simEvent") {

      } else {
        lang = this.kbdtype === "JP" ? "ja" : "en";
        if (mode === "assignOrg") {
          keycombo = this.$(".origin").text();
        } else {
          keycombo = this.$(".proxy").text();
        }
        keycombo = (keycombo.replace(/\s/g, "")).toUpperCase();
        if (!(help = scHelp[keycombo])) {
          if (/^CTRL\+[2-7]$/.test(keycombo)) {
            help = scHelp["CTRL+1"];
          }
        }
        if (help) {
          _results = [];
          for (i = _i = 0, _ref = help[lang].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            test = help[lang][i].match(/(^\w+)\^(.+)/);
            key = RegExp.$1;
            content = RegExp.$2;
            _results.push(this.$("td.desc").append(this.templateDesc({
              sectDesc: scHelpSect[key],
              sectKey: key,
              scHelp: content
            })));
          }
          return _results;
        }
      }
    },
    templateDesc: _.template("<div class=\"sectInit\" title=\"<%=sectDesc%>\"><%=sectKey%></div><div class=\"content\"><%=scHelp%></div>"),
    template: _.template("<tr>\n  <td>\n    <div class=\"proxy\" tabIndex=\"0\"></div>\n  </td>\n  <td>\n    <i class=\"icon-double-angle-right\"></i>\n  </td>\n  <td class=\"tdOrigin\">\n    <div class=\"origin\" tabIndex=\"0\"></div>\n  </td>\n  <td>\n    <select class=\"mode\">\n      <option value=\"assignOrg\">None</option>\n      <option value=\"simEvent\">Simurate key event</option>\n      <option value=\"disabled\">Disabled</option>\n    </select>\n  <td class=\"desc\">\n  </td>\n  <td class=\"remove\">\n    <i class=\"icon-remove\" title=\"Remove\"></i>\n  </td>\n  <td class=\"blank\">&nbsp;</td>\n</tr>")
  });

  KeyConfigSetView = Backbone.View.extend({
    placeholder: "Enter new shortcut key",
    el: "table.keyConfigSetView",
    events: {
      "blur div.addnew": "onBlurAddnew"
    },
    initialize: function(options) {
      this.collection.comparator = function(model) {
        return model.get("ordernum");
      };
      return this.collection.on({
        add: this.onAddRender,
        kbdEvent: this.onKbdEvent
      }, this);
    },
    render: function(keyConfigSet) {
      var _this = this;
      this.$el.append(this.template());
      this.collection.set(keyConfigSet);
      this.$("tbody").sortable({
        delay: 300,
        scroll: true,
        cursor: "move",
        update: function() {
          return _this.userSorted();
        }
      });
      this.setTableVisible();
      $("button").focus().blur();
      return this;
    },
    onAddRender: function(model) {
      var keyConfigView, newChild;
      keyConfigView = new KeyConfigView({
        model: model
      });
      keyConfigView.on("decodeKbdEvent", this.onChildDecodeKbdEvent, this);
      keyConfigView.on("removeConfig", this.onChildRemoveConfig, this);
      this.$("tbody").append(newChild = keyConfigView.render(this.model.get("kbdtype")).$el);
      this.setTableVisible();
      return newChild.find(".proxy").focus();
    },
    onKbdEvent: function(value) {
      if (this.$(".addnew").length === 0) {
        return;
      }
      if (this.collection.findWhere({
        proxy: value
      })) {
        $("#tiptip_content").text("\"" + (this.decodeKbdEvent(value)) + "\" is already exists.");
        this.$("div.addnew").tipTip();
        return;
      }
      this.collection.add(new KeyConfig({
        proxy: value,
        origin: value
      }));
      this.$("tbody").sortable("enable").sortable("refresh");
      return windowOnResize();
    },
    onChildDecodeKbdEvent: function(value, container) {
      return container.result = this.decodeKbdEvent(value);
    },
    onChildRemoveConfig: function(model) {
      this.collection.remove(model);
      this.setTableVisible();
      return windowOnResize();
    },
    onClickAddKeyConfig: function(event) {
      if (this.$(".addnew").length > 0) {
        return;
      }
      if (this.collection.length >= 20) {
        $("#tiptip_content").text("You have reached the maximum number of items. (Max 20 items)");
        $(event.currentTarget).tipTip({
          defaultPosition: "right"
        });
        return;
      }
      $(this.templateAddNew({
        placeholder: this.placeholder
      })).appendTo(this.$("tbody")).find(".proxy").focus()[0].scrollIntoView();
      this.$("tbody").sortable("disable");
      return windowOnResize();
    },
    onBlurAddnew: function() {
      this.$(".addnew").remove();
      this.$("tbody").sortable("enable");
      return windowOnResize();
    },
    onChangeSelKbd: function(event) {
      var newKbd;
      keys = keyCodes[newKbd = event.currentTarget.value].keys;
      this.collection.trigger("changeKbd", newKbd);
      return this.model.set("kbdtype", newKbd);
    },
    decodeKbdEvent: function(value) {
      var keyCombo, keyIdenfiers, modifiers, scanCode;
      modifiers = parseInt(value.substring(0, 2), 16);
      scanCode = value.substring(2);
      keyIdenfiers = keys[scanCode];
      keyCombo = [];
      if (modifiers & 1) {
        keyCombo.push("Ctrl");
      }
      if (modifiers & 2) {
        keyCombo.push("Alt");
      }
      if (modifiers & 8) {
        keyCombo.push("Meta");
      }
      if (modifiers & 4) {
        keyCombo.push("Shift");
        keyCombo.push(keyIdenfiers[1] || keyIdenfiers[0]);
      } else {
        keyCombo.push(keyIdenfiers[0]);
      }
      return keyCombo.join(" + ");
    },
    setTableVisible: function() {
      if (this.collection.length === 0) {
        return this.$el.hide();
      } else {
        return this.$el.show();
      }
    },
    userSorted: function() {
      this.collection.trigger("updateOrder");
      return this.collection.sort();
    },
    getSaveData: function() {
      this.collection.remove(this.collection.findWhere({
        proxy: this.placeholder
      }));
      return {
        config: this.model.toJSON(),
        keyConfigSet: this.collection.toJSON()
      };
    },
    templateAddNew: _.template("<tr class=\"addnew\">\n  <td colspan=\"3\">\n    <div class=\"proxy addnew\" tabIndex=\"0\"><%=placeholder%></div>\n  </td>\n  <td></td><td></td><td></td><td class=\"blank\"></td>\n</tr>"),
    template: _.template("<thead>\n  <tr>\n    <th>\n      <div class=\"th_inner\">New <i class=\"icon-double-angle-right\"></i> Origin shortcut key</div>\n    </th>\n    <th></th>\n    <th></th>\n    <th>\n      <div class=\"th_inner\">Options</div>\n    </th>\n    <th>\n      <div class=\"th_inner desc\">Description</div>\n    </th>\n    <th></th>\n    <th><div class=\"th_inner blank\">&nbsp;</div></th>\n  </tr>\n</thead>\n<tbody></tbody>")
  });

  marginBottom = 0;

  resizeTimer = false;

  windowOnResize = function() {
    if (resizeTimer) {
      clearTimeout(resizeTimer);
    }
    return resizeTimer = setTimeout((function() {
      var tableHeight;
      tableHeight = window.innerHeight - document.querySelector(".header").offsetHeight - marginBottom;
      document.querySelector(".fixed-table-container").style.pixelHeight = tableHeight;
      return $(".fixed-table-container-inner").getNiceScroll().resize();
    }), 200);
  };

  fk = chrome.extension.getBackgroundPage().fk;

  saveData = fk.getConfig();

  keyCodes = fk.getKeyCodes();

  scHelp = fk.getScHelp();

  scHelpSect = fk.getScHelpSect();

  $ = jQuery;

  $(function() {
    var headerView, keyConfigSetView;
    headerView = new HeaderView({
      model: new Config(saveData.config)
    });
    headerView.render();
    keyConfigSetView = new KeyConfigSetView({
      model: new Config(saveData.config),
      collection: new KeyConfigSet()
    });
    keyConfigSetView.render(saveData.keyConfigSet);
    headerView.on("clickAddKeyConfig", keyConfigSetView.onClickAddKeyConfig, keyConfigSetView);
    headerView.on("changeSelKbd", keyConfigSetView.onChangeSelKbd, keyConfigSetView);
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
      switch (request.action) {
        case "kbdEvent":
          return keyConfigSetView.collection.trigger("kbdEvent", request.value);
        case "saveConfig":
          return fk.saveConfig(keyConfigSetView.getSaveData());
      }
    });
    $(window).on("unload", function() {
      return fk.saveConfig(keyConfigSetView.getSaveData());
    }).on("resize", function() {
      return windowOnResize();
    });
    windowOnResize();
    $(".fixed-table-container-inner").niceScroll({
      cursorwidth: 12,
      cursorborderradius: 2,
      smoothscroll: false,
      cursoropacitymin: .1,
      cursoropacitymax: .6
    });
    return $(".beta").text("\u03B2");
  });

}).call(this);
