// Generated by CoffeeScript 1.6.3
(function() {
  var flexkbd, isActivated, keydown, kickSHS, portOtoB, sendMessage;

  window.fk = {};

  flexkbd = document.getElementById("flexkbd");

  portOtoB = void 0;

  chrome.runtime.onConnect.addListener(function(port) {
    if (port.name === "OtoB") {
      portOtoB = port;
      portOtoB.onMessage.addListener(function(msg) {
        return msg.joke === "Knock knock";
      });
      return portOtoB.onDisconnect.addListener(function() {
        return portCtoB.onMessage.removeListener(onMessageHandler);
      });
    }
  });

  sendMessage = function(message) {
    return chrome.tabs.query({
      active: true
    }, function(tabs) {
      return chrome.tabs.sendMessage(tabs[0].id, message);
    });
  };

  kickSHS = function(shortcut) {
    return flexkbd.keyEvent(shortcut);
  };

  chrome.commands.getAll(function(commands) {
    return commands.forEach(function(command) {
      if (command.name === "_execute_browser_action") {
        return chrome.contextMenus.create({
          title: "「%s」をページ内検索",
          type: "normal",
          contexts: ["selection"],
          onclick: kickSHS(command.shortcut)
        });
      }
    });
  });

  keydown = function() {
    return flexkbd.keyEvent();
  };

  chrome.contextMenus.create({
    title: "「%s」をページ内検索",
    type: "normal",
    contexts: ["selection"],
    onclick: keydown
  });

  isActivated = false;

  chrome.tabs.onActivated.addListener(function(activeInfo) {
    return chrome.tabs.get(activeInfo.tabId, function(tab) {
      if (tab.url.indexOf(chrome.extension.getURL("")) === 0) {
        flexkbd.startConfigMode();
        return isActivated = true;
      } else {
        flexkbd.endConfigMode();
        if (isActivated) {
          sendMessage({
            action: "saveConfig"
          });
        }
        return isActivated = false;
      }
    });
  });

  fk.saveConfig = function(saveData) {
    var sendData;
    localStorage.flexkbd = JSON.stringify(saveData);
    sendData = JSON.parse(saveData.keyConfigSet);
    return flexkbd.setKeyConfig.apply(null, saveData);
  };

  fk.getKeyCodes = function() {
    return {
      JP: {
        keys: keysJP,
        name: "JP 109 Keyboard"
      },
      US: {
        keys: keysUS,
        name: "US 104 Keyboard"
      }
    };
  };

  fk.getConfig = function() {
    return JSON.parse(localStorage.flexkbd || null) || {
      config: {
        kbdtype: "JP"
      }
    };
  };

  window.pluginEvent = function(action, value) {
    switch (action) {
      case "log":
        return console.log(value);
      case "kbdEvent":
        return sendMessage({
          action: "kbdEvent",
          value: value
        });
    }
  };

}).call(this);
