// Generated by CoffeeScript 1.6.3
(function() {
  var getConfig, getKeyCodes, keydown, kickSHS, portOtoB, sendMessage, startConfigMode;

  kickSHS = function(shortcut) {
    var flexkbd;
    flexkbd = document.getElementById("flexkbd");
    return flexkbd.keyEvent(shortcut);
  };

  chrome.commands.getAll(function(commands) {
    return commands.forEach(function(command) {
      if (command.name === "_execute_browser_action") {
        return chrome.contextMenus.create({
          title: "「%s」をページ内検索",
          type: "normal",
          contexts: ["selection"],
          onclick: kickSHS(command.shortcut)
        });
      }
    });
  });

  keydown = function() {
    var flexkbd;
    flexkbd = document.getElementById("flexkbd");
    return flexkbd.keyEvent();
  };

  chrome.contextMenus.create({
    title: "「%s」をページ内検索",
    type: "normal",
    contexts: ["selection"],
    onclick: keydown
  });

  chrome.tabs.onActivated.addListener(function(activeInfo) {
    return chrome.tabs.get(activeInfo.tabId, function(tab) {
      var flexkbd;
      flexkbd = document.getElementById("flexkbd");
      if (tab.url.indexOf(chrome.extension.getURL("")) === 0) {
        return flexkbd.startConfigMode();
      } else {
        return flexkbd.endConfigMode();
      }
    });
  });

  portOtoB = void 0;

  chrome.runtime.onConnect.addListener(function(port) {
    if (port.name === "OtoB") {
      portOtoB = port;
      portOtoB.onMessage.addListener(function(msg) {
        return msg.joke === "Knock knock";
      });
      return portOtoB.onDisconnect.addListener(function() {
        return portCtoB.onMessage.removeListener(onMessageHandler);
      });
    }
  });

  startConfigMode = function() {
    var flexkbd;
    return flexkbd = document.getElementById("flexkbd");
  };

  getKeyCodes = function() {
    return {
      JP: keysJP,
      US: keysUS
    };
  };

  getConfig = function() {
    return JSON.parse(localStorage.flexkbd || null) || {
      kbdtype: "JP"
    };
  };

  sendMessage = function(message) {
    return chrome.tabs.query({
      active: true
    }, function(tabs) {
      return chrome.tabs.sendMessage(tabs[0].id, message);
    });
  };

  window.pluginEvent = function(key, value) {
    switch (key) {
      case "log":
        return console.log(value);
      case "kbdEvent":
        return sendMessage({
          key: "kbdEvent",
          value: value
        });
    }
  };

}).call(this);
